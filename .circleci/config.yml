# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2.1

orbs: 
  terraform: circleci/terraform@3.1.0

executors:
  python-node:
    docker:
      - image: python:3.7.3-stretch
    
  aws-cli:
    docker:
      - image: amazon/aws-cli

  terraform-cli:
    docker:
      - image: hashicorp/terraform:light


# commands:
#   destroy-on-fail:
#     description: "Destroy created infrastructure if job fails"
#     steps:
#       - run: 
#           name: Destroy infrastructure on fail

jobs:
  build:
    executor: python-node   
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
              . venv/bin/activate
              make install
              # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
      - save_cache:
          paths: 
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
              make lint 
      # run test if test files are available
      - run:
          name: run test
          command: |
            . venv/bin/activate
            # make test

  #Deploy infrastructure to test Image on AWS
  deploy-infrastructure:
    working_directory: ~/project/.circleci/files
    executor: terraform/default
    steps:
      - checkout
      - run:  apk add --update tar gzip
      - terraform/init:
          path: .
      - terraform/validate:
          path: .
      - terraform/fmt:
          path: .
      - terraform/plan:
          path: .
      - terraform/apply:
          path: .
            
            # To deploy using cloud formation
            # env
            # aws cloudformation deploy --template-file .circleci/files/deploy-ec2.yaml \
            # --tags project=ML-Microservice --stack-name "ML-Microservice-Project" \
            # --parameter-overrides ID="ML-${CIRCLE_WORKFLOW_ID:0:7}" \
            # InstanceType="t2.micro"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    executor: python-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "90:6d:26:97:50:03:da:15:e3:1f:c4:0c:46:3a:b7:18"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apt update -y && apt install -y ansible tar gzip
      - run:
          name: Configure instance and install Docker
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

workflows:
  build-and-test:
    jobs:
      - build
      - deploy-infrastructure:
          requires:
            - "build"
      - configure-infrastructure:
          requires:
            - "deploy-infrastructure"

    